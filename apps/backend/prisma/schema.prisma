// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  cityId             Int                @id @default(autoincrement())
  name               String             @unique
  institutionsInCity Institution_City[]
  ads                Ad_City[]
}

model Institution {
  institutionId         Int                @id @default(autoincrement())
  name                  String             @unique
  citiesInstitutionIsIn Institution_City[]
  examinations          Examination[]
}

model Institution_City {
  cityId        Int
  institutionId Int
  city          City        @relation(fields: [cityId], references: [cityId])
  institution   Institution @relation(fields: [institutionId], references: [institutionId])

  @@id([cityId, institutionId])
}

model Ad {
  adId        Int           @id @default(autoincrement())
  name        String        @unique
  description String
  discount    Int
  image       String
  cities      Ad_City[]
  categories  Ad_Category[]
}

model Ad_City {
  cityId Int
  adId   Int
  city   City @relation(fields: [cityId], references: [cityId])
  ad     Ad   @relation(fields: [adId], references: [adId])

  @@id([cityId, adId])
}

model Category {
  categoryId   Int                    @id @default(autoincrement())
  name         String                 @unique
  img          String
  ads          Ad_Category[]
  quizzes      Quiz_Category[]
  examinations Examination_Category[]
  rewards      Reward[]
}

model Ad_Category {
  categoryId Int
  adId       Int
  category   Category @relation(fields: [categoryId], references: [categoryId])
  ad         Ad       @relation(fields: [adId], references: [adId])

  @@id([categoryId, adId])
}

model Quiz {
  quizId       Int             @id @default(autoincrement())
  name         String          @unique
  description  String
  text         String
  earnedPoints Int
  categories   Quiz_Category[]
  users        Quiz_User[]
  questions    QuizQuestion[]
}

model Quiz_Category {
  categoryId Int
  quizId     Int
  category   Category @relation(fields: [categoryId], references: [categoryId])
  quiz       Quiz     @relation(fields: [quizId], references: [quizId])

  @@id([categoryId, quizId])
}

model Examination {
  examinationId Int                    @id @default(autoincrement())
  name          String
  institutionId Int
  institution   Institution            @relation(fields: [institutionId], references: [institutionId])
  time          DateTime
  price         Float
  discount      Int
  description   String?
  image         String
  categories    Examination_Category[]
}

model Examination_Category {
  categoryId    Int
  examinationId Int
  category      Category    @relation(fields: [categoryId], references: [categoryId])
  examination   Examination @relation(fields: [examinationId], references: [examinationId])

  @@id([categoryId, examinationId])
}

model Code {
  codeId            Int    @id @default(autoincrement())
  autenticationCode String
}

model User {
  userId         Int         @id @default(autoincrement())
  name           String
  surname        String
  dateOfBirth    DateTime
  dateRegister   DateTime    @default(now())
  points         Int
  streak         Int
  email          String      @unique
  password       String
  lastStreakDate DateTime?
  quizzes        Quiz_User[]
  streaks        Streak[]
}

model Streak {
  streakId    Int      @id @default(autoincrement())
  dateCreated DateTime @default(now())
  userId      Int
  user        User     @relation(fields: [userId], references: [userId])
}

model Quiz_User {
  userId    Int
  quizId    Int
  user      User    @relation(fields: [userId], references: [userId])
  quiz      Quiz    @relation(fields: [quizId], references: [quizId])
  completed Boolean

  @@id([userId, quizId])
}

model QuizQuestion {
  questionId      Int      @id @default(autoincrement())
  question        String
  possibleAnswers String[]
  correctAnswer1  String[]
  correctAnswer2  String[]
  type            String
  quizId          Int
  quiz            Quiz     @relation(fields: [quizId], references: [quizId])
}

model DailyMessage {
  dailyMessageId Int    @id @default(autoincrement())
  message        String @unique
}

model Reward {
  rewardId    Int      @id @default(autoincrement())
  title       String   @unique
  description String
  message     String
  img         String
  categoryId  Int
  points      Int
  category    Category @relation(fields: [categoryId], references: [categoryId])
}
